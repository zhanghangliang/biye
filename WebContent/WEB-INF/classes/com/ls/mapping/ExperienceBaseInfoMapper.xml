<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ls.dao.ExperienceBaseInfoMapper" >
  <resultMap id="BaseResultMap" type="com.ls.entity.ExperienceBaseInfo" >
    <id column="experience_id" property="experienceId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="experience_title" property="experienceTitle" jdbcType="VARCHAR" />
    <result column="experience_time" property="experienceTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.ls.entity.ExperienceBaseInfo" extends="BaseResultMap" >
    <result column="experience_content" property="experienceContent" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    experience_id, user_id, experience_title, experience_time, status
  </sql>
  <sql id="Blob_Column_List" >
    experience_content
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.ls.entity.ExperienceBaseInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from experience_base_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ls.entity.ExperienceBaseInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from experience_base_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from experience_base_info
    where experience_id = #{experienceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from experience_base_info
    where experience_id = #{experienceId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ls.entity.ExperienceBaseInfoExample" >
    delete from experience_base_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ls.entity.ExperienceBaseInfo" useGeneratedKeys="true" keyProperty="experienceId">
    insert into experience_base_info (experience_id, user_id, experience_title, 
      experience_time, status, experience_content
      )
    values (#{experienceId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{experienceTitle,jdbcType=VARCHAR}, 
      #{experienceTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{experienceContent,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ls.entity.ExperienceBaseInfo" >
    insert into experience_base_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="experienceId != null" >
        experience_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="experienceTitle != null" >
        experience_title,
      </if>
      <if test="experienceTime != null" >
        experience_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="experienceContent != null" >
        experience_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="experienceId != null" >
        #{experienceId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="experienceTitle != null" >
        #{experienceTitle,jdbcType=VARCHAR},
      </if>
      <if test="experienceTime != null" >
        #{experienceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="experienceContent != null" >
        #{experienceContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ls.entity.ExperienceBaseInfoExample" resultType="java.lang.Integer" >
    select count(*) from experience_base_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update experience_base_info
    <set >
      <if test="record.experienceId != null" >
        experience_id = #{record.experienceId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.experienceTitle != null" >
        experience_title = #{record.experienceTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.experienceTime != null" >
        experience_time = #{record.experienceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.experienceContent != null" >
        experience_content = #{record.experienceContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update experience_base_info
    set experience_id = #{record.experienceId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      experience_title = #{record.experienceTitle,jdbcType=VARCHAR},
      experience_time = #{record.experienceTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      experience_content = #{record.experienceContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update experience_base_info
    set experience_id = #{record.experienceId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      experience_title = #{record.experienceTitle,jdbcType=VARCHAR},
      experience_time = #{record.experienceTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ls.entity.ExperienceBaseInfo" >
    update experience_base_info
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="experienceTitle != null" >
        experience_title = #{experienceTitle,jdbcType=VARCHAR},
      </if>
      <if test="experienceTime != null" >
        experience_time = #{experienceTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="experienceContent != null" >
        experience_content = #{experienceContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where experience_id = #{experienceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ls.entity.ExperienceBaseInfo" >
    update experience_base_info
    set user_id = #{userId,jdbcType=INTEGER},
      experience_title = #{experienceTitle,jdbcType=VARCHAR},
      experience_time = #{experienceTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      experience_content = #{experienceContent,jdbcType=LONGVARCHAR}
    where experience_id = #{experienceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ls.entity.ExperienceBaseInfo" >
    update experience_base_info
    set user_id = #{userId,jdbcType=INTEGER},
      experience_title = #{experienceTitle,jdbcType=VARCHAR},
      experience_time = #{experienceTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where experience_id = #{experienceId,jdbcType=INTEGER}
  </update>
  <select id="selectByStatus" resultMap="ResultMapWithBLOBs">
  		SELECT * FROM `experience_base_info`  AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(experience_id) FROM `experience_base_info`)) AS experience_id) AS t2 WHERE t1.experience_id >= t2.experience_id
	AND status=#{status} ORDER BY t1.experience_id ASC LIMIT ${num}
  </select>
</mapper>